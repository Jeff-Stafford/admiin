# Derived from:
# nx - lint, test and build - https://nx.dev/recipes/ci/monorepo-ci-github-actions
# SHAs - https://github.com/nrwl/nx-set-shas
# publishing - https://lerna.js.org/docs/features/version-and-publish
name: Build and deploy frontend and web applications
on:
  push:
    branches:
      - sprint/onboarding
  pull_request:
    branches:
      - sprint/onboarding

env:
  NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}} # token generated by setup-node@v3 & used by project .npmrc files
  # BEFORE_SHA: ${{ github.event.before }} #TODO: check if required for affected, otherwise remove from here and below

jobs:
  build-deploy-cdk:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
          registry-url: https://npm.pkg.github.com/
          scope: "@admiin-com"
          always-auth: true
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        id: setSHAs
        uses: nrwl/nx-set-shas@v3 # TODO review purpose
      - run: |
          echo "BASE: ${{ steps.setSHAs.outputs.base }}"
          echo "HEAD: ${{ steps.setSHAs.outputs.head }}"
      - name: Set yarn version
        run: yarn set version berry
      - name: Install dependencies
        run: yarn --version && yarn set version berry && yarn --version && yarn && cd apps/backend/src/layers/dependencyLayer/nodejs && yarn
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Checks for unformatted files
        run: yarn nx format:check --all
      - name: Check files formatted
        run: yarn nx affected -t lint --parallel=3 --exclude=backoffice-app #-- --base=$BEFORE_SHA
      # - name: Setup Test Environment
        # run: cp output.example.json output.json
        # Alternatively, generate output.json dynamically
        # run: node generate_output.js
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: "us-east-1"
      - name: Set environment variables based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/prod" ]] || [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "ABR_GUID=${{ secrets.ABR_GUID_PROD }}" >> $GITHUB_ENV
            echo "AWS_ACCOUNT=${{ secrets.AWS_ACCOUNT_PROD }}" >> $GITHUB_ENV
            echo "FRANKIEONE_API_DOMAIN=${{ vars.FRANKIEONE_API_DOMAIN_PROD }}" >> $GITHUB_ENV
            echo "FRANKIEONE_SMARTUI_DOMAIN=${{ vars.FRANKIEONE_SMARTUI_DOMAIN_PROD }}" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
            echo "ABR_GUID=${{ secrets.ABR_GUID_DEV }}" >> $GITHUB_ENV
            echo "API_KEY=${{ secrets.DEV_API_KEY }}" >> $GITHUB_ENV
            echo "AWS_ACCOUNT=${{ secrets.AWS_ACCOUNT_DEV }}" >> $GITHUB_ENV
            echo "FRANKIEONE_API_KEY=${{ secrets.FRANKIEONE_API_KEY_DEV }}" >> $GITHUB_ENV
            echo "FRANKIEONE_CUSTOMER_ID=${{ secrets.FRANKIEONE_CUSTOMER_ID_DEV }}" >> $GITHUB_ENV
            echo "MIXPANEL_SECRET=${{ secrets.MIXPANEL_SECRET_DEV }}" >> $GITHUB_ENV
            echo "MIXPANEL_TOKEN=${{ secrets.MIXPANEL_TOKEN_DEV }}" >> $GITHUB_ENV
            echo "XERO_CLIENT_ID=${{ secrets.XERO_CLIENT_ID_DEV }}" >> $GITHUB_ENV
            echo "ZAI_CLIENT_ID=${{ secrets.ZAI_CLIENT_ID_DEV }}" >> $GITHUB_ENV
            echo "ZAI_CLIENT_SCOPE=${{ secrets.ZAI_CLIENT_SCOPE_DEV }}" >> $GITHUB_ENV
            echo "ZAI_DOMAIN=${{ secrets.ZAI_DOMAIN_DEV }}" >> $GITHUB_ENV
            echo "VITE_PSPDFKIT_KEY=${{ secrets.VITE_PSPDFKIT_KEY_PROD_APP }}" >> $GITHUB_ENV
            echo "APPLE_BUNDLE_ID=${{ vars.APPLE_BUNDLE_ID }}" >> $GITHUB_ENV
            echo "FRANKIEONE_API_DOMAIN=${{ vars.FRANKIEONE_API_DOMAIN_DEV }}" >> $GITHUB_ENV
            echo "FRANKIEONE_SMARTUI_DOMAIN=${{ vars.FRANKIEONE_SMARTUI_DOMAIN_DEV }}" >> $GITHUB_ENV
            echo "GOOGLE_BUNDLE_ID=${{ vars.GOOGLE_BUNDLE_ID }}" >> $GITHUB_ENV
            echo "ZAI_TOKEN_DOMAIN=${{ vars.ZAI_TOKEN_DOMAIN_DEV }}" >> $GITHUB_ENV
            echo "ZAI_WEBHOOK_DOMAIN=${{ vars.ZAI_WEBHOOK_DOMAIN_DEV }}" >> $GITHUB_ENV
            echo "VITE_PSPDFKIT_KEY=${{ secrets.VITE_PSPDFKIT_KEY_DEV_APP }}" >> $GITHUB_ENV
          fi
          echo "XERO_CLIENT_SECRET=${{ secrets.XERO_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "XERO_WEBHOOK_SECRET=${{ secrets.XERO_WEBHOOK_SECRET }}" >> $GITHUB_ENV
          echo "APPLE_CONNECT_KEY=${{ secrets.APPLE_CONNECT_KEY }}" >> $GITHUB_ENV
          echo "APPLE_CONNECT_KEY_ID=${{ secrets.APPLE_CONNECT_KEY_ID }}" >> $GITHUB_ENV
          echo "APPLE_CONNECT_ISSUER_ID=${{ secrets.APPLE_CONNECT_ISSUER_ID }}" >> $GITHUB_ENV
      - name: Write backend .env file
        run: |
          echo "ENV=${{ env.ENV }}" > apps/backend/.env
          echo "ABR_GUID=${{ env.ABR_GUID }}" >> apps/backend/.env
          echo "AWS_ACCOUNT=${{ env.AWS_ACCOUNT }}" >> apps/backend/.env
          echo "FRANKIEONE_API_KEY=${{ env.FRANKIEONE_API_KEY }}" >> apps/backend/.env
          echo "FRANKIEONE_CUSTOMER_ID=${{ env.FRANKIEONE_CUSTOMER_ID }}" >> apps/backend/.env
          echo "MIXPANEL_SECRET=${{ env.MIXPANEL_SECRET }}" >> apps/backend/.env
          echo "MIXPANEL_TOKEN=${{ env.MIXPANEL_TOKEN }}" >> apps/backend/.env
          echo "XERO_CLIENT_ID=${{ env.XERO_CLIENT_ID }}" >> apps/backend/.env
          echo "ZAI_CLIENT_ID=${{ env.ZAI_CLIENT_ID }}" >> apps/backend/.env
          echo "ZAI_CLIENT_SCOPE=${{ env.ZAI_CLIENT_SCOPE }}" >> apps/backend/.env
          echo "ZAI_DOMAIN=${{ env.ZAI_DOMAIN }}" >> apps/backend/.env
          echo "XERO_CLIENT_SECRET=${{ env.XERO_CLIENT_SECRET }}" >> apps/backend/.env
          echo "XERO_WEBHOOK_SECRET=${{ env.XERO_WEBHOOK_SECRET }}" >> apps/backend/.env
          echo "APPLE_BUNDLE_ID=${{ env.APPLE_BUNDLE_ID }}" >> apps/backend/.env
          echo "FRANKIEONE_API_DOMAIN=${{ env.FRANKIEONE_API_DOMAIN }}" >> apps/backend/.env
          echo "FRANKIEONE_SMARTUI_DOMAIN=${{ env.FRANKIEONE_SMARTUI_DOMAIN }}" >> apps/backend/.env
          echo "GOOGLE_BUNDLE_ID=${{ env.GOOGLE_BUNDLE_ID }}" >> apps/backend/.env
          echo "ZAI_TOKEN_DOMAIN=${{ env.ZAI_TOKEN_DOMAIN }}" >> apps/backend/.env
          echo "ZAI_WEBHOOK_DOMAIN=${{ env.ZAI_WEBHOOK_DOMAIN }}" >> apps/backend/.env

      - name: Write frontend .env file
        run: |
          echo "ENV=${{ env.ENV }}" > apps/react-app/.env
          echo "VITE_PSPDFKIT_KEY=${{ env.VITE_PSPDFKIT_KEY }}" >> apps/react-app/.env
      - name: Run codegen
        run:  yarn codegen
      - name: Build packages
        run:  yarn nx affected -t build --parallel=3 --exclude backoffice-app
      - name: Deploy frontend to AWS using CDK
        run:  yarn nx deploy backend ADMFrontendStack --require-approval=never
        env:
          AWS_DEFAULT_REGION: us-east-1 # or different region
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      - name: Run automated tests
        run: yarn transpile:appsync:resolvers && yarn nx affected -t test --parallel=3 --configuration=ci --exclude backoffice-app

